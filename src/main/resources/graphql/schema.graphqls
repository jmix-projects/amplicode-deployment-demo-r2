type Query {
    #Owner
    ownerList : [Owner]
    owner(id : ID!) : Owner
    #Pet
    petList : [Pet]
    pet(id : ID!) : Pet
    #PetType
    petTypeList : [PetTypeDTO]
    petType(id : Long) : PetTypeDTO
    #Visit
    visitList : [Visit]
    visit(id : ID!) : Visit
    #Test
    testList : [Test]
    test(id : ID!) : Test
}

type Mutation {
    #Owner
    delete_Owner(id : ID!): Boolean
    update_Owner(input: OwnerInput): Owner
    #Pet
    delete_Pet(id : ID!): Boolean
    update_Pet(input: PetInput): Pet
    #PetType
    delete_PetType(id : Long!): Boolean
    update_PetType(input: PetTypeInputDTOInput): PetTypeDTO
    #Visit
    delete_Visit(id : ID!): Boolean
    update_Visit(input: VisitInput): Visit
    #Test
    delete_Test(id : ID!): Boolean
    update_Test(input: TestInput): Test
}

# Owner
input OwnerInput {
    id: ID
    firstName: String
    lastName: String
    address: String
    city: String
    email: String
    telephone: String
}

type Owner {
    id: ID
    firstName: String!
    lastName: String!
    address: String!
    city: String!
    email: String
    telephone: String
}

# Pet
input PetInput {
    id: ID
    identificationNumber: String
    birthDate: Date
    type: PetTypeDTOInput
    owner: OwnerInput
}

type Pet {
    id: ID
    identificationNumber: String,
    birthDate: Date,
    type: PetTypeDTO,
    owner: Owner,
}

# PetType
input PetTypeInputDTOInput {
    id: Long
    name: String
}

type PetTypeDTO {
    id: Long
    name: String
}

input PetTypeDTOInput {
    id: Long
    name: String
}

# Visit
type Visit {
    id: ID
    visitStart: DateTime
    visitEnd: DateTime
    pet: Pet
    description: String
}

input VisitInput {
    id: ID
    visitStart: String
    visitEnd: String
    description: String
}

# Test
type Test {
    id: ID
    string: String
    bool: Boolean
    doubleTest: Float
    intTest: Int
    longTest: BigInteger
    bigDecimal: BigDecimal
    #    date: String
    #    time: String
    #    timeStamp: String
    #    dateUtil: String
    uuidTest: String
    byteTest: Int
    #    character: String
    floatTest: Float
    shortTest: Int
    bigInt: BigInteger
    url: String
    #    duration: String
    #    instant: String
    localDate: Date
    localDateTime: DateTime
    localTime: Time
    offsetDateTime: DateTime
    offsetTime: Time
    zonedDateTime: DateTime
    #    calendar: String
    currency: String
    locale: String
    boolPrimitive: Boolean
    bytePrimitive: Int
    #    charPrimitive: String
    shortPrimitive: Int
    #    byteArray: String
    #    charArray: String
    #    bytePrimitiveArray: String
    #    charPrimitiveArray: String
}

input TestInput {
    id: ID
    string: String
    bool: Boolean
    doubleTest: Float
    intTest: Int
    longTest: BigInteger
    bigDecimal: BigDecimal
#    date: String
#    time: String
#    timeStamp: String
#    dateUtil: String
    uuidTest: String
    byteTest: Int
#    character: String
    floatTest: Float
    shortTest: Int
    bigInt: BigInteger
    url: String
#    duration: String
#    instant: String
    localDate: Date
    localDateTime: DateTime
    localTime: Time
    offsetDateTime: DateTime
    offsetTime: Time
    zonedDateTime: DateTime
#    calendar: String
    currency: String
    locale: String
    boolPrimitive: Boolean
    bytePrimitive: Int
#    charPrimitive: String
    shortPrimitive: Int
#    byteArray: String
#    charArray: String
#    bytePrimitiveArray: String
#    charPrimitiveArray: String
}

scalar Date
scalar DateTime
scalar Time
scalar BigInteger
scalar BigDecimal


"Long"
scalar Long
